import argparse
import json
import os

from dotenv import load_dotenv
import numpy as np
import ray
import requests
from tqdm import tqdm
from loguru import logger


def opts():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--first', help='First task ID', type=int, required=True)
    parser.add_argument('-l', '--last', help='Last task ID', type=int, required=True)
    parser.add_argument(
        '-o',
        '--data',
        help='`output.json` data file generated by YOLO to LS converter',
        type=str,
        required=True)
    return parser.parse_args()


def make_headers():
    TOKEN = os.environ['TOKEN']
    headers = requests.structures.CaseInsensitiveDict()
    headers['Content-type'] = 'application/json'
    headers['Authorization'] = f'Token {TOKEN}'
    return headers


@ray.remote
def get_today_tasks(_task_id):
    url = f'{os.environ["LS_HOST"]}/api/tasks/{_task_id}'
    resp = requests.get(url, headers=headers)
    return resp.json()


def main(_result):
    scores = []
    results = []
    _labels_name = []
    for result in _result['annotations']:
        for res in result['result']:
            scores.append(res['score'])
            results.append(res)
            _labels_name.append(res['value']['rectanglelabels'])

    img = _result['data']['image']
    FOUND = False
    for TASK in TASKS:
        if img == TASK['data']['image']:
            FOUND = True
        if FOUND:
            break
    if not FOUND:
        logger.warning(f'Could not find {img} in tasks')
        return

    post_ = {
        'model_version': 'BirdFSD-YOLOv5-V1',
        'result': results,
        'score': np.mean(scores),
        'cluster': 0,
        'neighbors': {},
        'mislabeling': 0,
        'task': TASK['id']
    }

    logger.debug({'post': post_})

    url = F'{os.environ["LS_HOST"]}/api/predictions/'
    resp = requests.post(url, headers=headers, data=json.dumps(post_))
    logger.debug({'response': resp.json()})


if __name__ == '__main__':
    args = opts()

    load_dotenv()
    headers = make_headers()

    futures = []
    for _task_id in range(args.first, args.last + 1):
        futures.append(get_today_tasks.remote(_task_id))

    TASKS = []
    for future in tqdm(futures):
        TASKS.append(ray.get(future))

    with open('today_tasks.json', 'w') as j:
        json.dump(TASKS, j)

    with open(args.data) as j:
        data = json.load(j)

    for _result in tqdm(data):
        main(_result)
